import asyncio
import base64
import io
import os
import logging
import random
import string
import requests
from datetime import date, datetime
from collections import defaultdict
from typing import Optional, Dict
from flask import render_template, redirect, url_for, flash, request, send_file, jsonify, session
from flask_login import login_user, logout_user, login_required, current_user
import json
from app import db
from app.models import Partner, PartnerInfo, User, PartnerInvitation, MessageTemplate, ClientSalonStatus, ClientsData, \
    FAQ, PartnerFAQStatus, PartnerAction, Tip, News, PartnerDailyStats
from app.partner import bp
from app.partner.forms import RegistrationForm, LoginForm, EditSalonForm, ResetPasswordForm, EditUserForm, AddSalonForm
from app.partner.services import (
    get_referral_stats,
    get_total_clients_brought_by_referrals,
    get_data_from_partner_daily_stats,
    get_partners_invited_data
)
from app.admin.routes import log_admin_action
from app.qr_code import generate_qr_code
from app.routes import get_template_or_default
from app.services import send_message, send_telegram_notification, create_or_update_partner_amocrm_lead, create_partner_amocrm_contact

def escape_handlebars_braces(text):
    text = text.replace('{', '{{')
    text = text.replace('}', '}}')
    return text


@bp.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.login.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            flash('–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'success')
            return redirect(url_for('partner.dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')
    return render_template('partner/login.html', form=form)


@bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    return redirect(url_for('partner.login'))


@bp.route('/')
def index():
    return redirect(url_for('partner.dashboard'))

@bp.route('/stop_impersonating')
def stop_impersonating():
    impersonated_user_id = session.pop('impersonated_user_id', None)
    if impersonated_user_id:
        logout_user()
        admin = User.query.filter_by(username='admin').first() # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        login_user(admin) # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log_admin_action(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {current_user.username} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞')
        flash('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É.', 'success')
    return redirect(url_for('admin.partners'))

def generate_unique_code(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è—è –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    while True:
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        if not Partner.query.filter_by(unique_code=code).first():
            return code


@bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    ref_id = request.args.get('ref')
    if form.validate_on_submit():
        existing_user = User.query.filter_by(username=form.login.data).first()
        if existing_user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.', 'danger')
            return render_template('partner/register.html', form=form)

        try:
            partner_id = generate_unique_salon_id(form.city.data.name)
            new_user = User(username=form.login.data)
            new_user.set_password(form.password.data)
            db.session.add(new_user)
            db.session.flush()
            new_partner_info = PartnerInfo(
                id=partner_id,
                partner_type=form.partner_type.data,
                categories=form.categories.data,
                name=form.salon_name.data,
                discount=form.discount_text.data,
                city_id=form.city.data.id,
                contacts=form.contacts.data,
                message_partner_name=form.message_salon_name.data
            )
            db.session.add(new_partner_info)
            db.session.flush()
            db.session.commit()
            unique_code = generate_unique_code()
            new_partner = Partner(
                user_id=new_user.id,
                referral_link=f"https://sarafan.club/partner-register/?ref={new_user.id}",
                unique_code=unique_code
            )
            new_partner.salons.append(new_partner_info)
            db.session.add(new_partner)
            db.session.commit()
            login_user(new_user)
            if ref_id:
                inviting_partner = Partner.query.filter_by(user_id=ref_id).first()
                if inviting_partner:
                    new_partner_info.invited_by = inviting_partner.id
                    inviting_partner.partners_invited += 1
                    new_invitation = PartnerInvitation(inviting_partner_id=inviting_partner.id,
                                                       invited_partner_id=new_partner.id, invitation_date=date.today())
                    db.session.add(new_invitation)
                    db.session.commit()
            log_partner_action(new_partner.id, 'registration')
            flash(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å FAQ.', 'success')

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin = User.query.filter_by(username='admin').first()
            if admin and admin.telegram_chat_ids:
                for chat_id in admin.telegram_chat_ids:
                    message = f"üéâ –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {new_user.username}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞: {new_partner_info.name}\n\nID: {new_partner_info.id}"
                    asyncio.run(send_telegram_notification(chat_id, message))

            return redirect(url_for('partner.faq'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}', 'danger')
            return render_template('partner/register.html', form=form)
    return render_template('partner/register.html', form=form)


def generate_unique_salon_id(city_name):
    while True:
        city_letter = city_name[0].lower()
        salon_id = f"{city_letter}{random.randint(100000, 999999)}"
        existing_salon = PartnerInfo.query.get(salon_id)
        if not existing_salon:
            return salon_id


@bp.route('/dashboard', methods=['GET', 'POST'])
@login_required
def dashboard():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∞–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    selected_salon_id = request.args.get('salon_id', partner.salons[0].id if partner.salons else None)
    period = request.args.get('period', 'month')

    total_clients_brought = partner.clients_brought
    total_clients_received = partner.clients_received
    total_partners_invited = partner.partners_invited
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–∞–∑–∞—Ö –∏ –æ—Ç–∫–∞–∑–∞—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∞–ª–æ–Ω–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    total_offers_shown = 0
    total_offers_rejected = 0
    for salon in partner.salons:
        total_offers_shown += db.session.query(db.func.sum(PartnerDailyStats.offers_shown)).filter(PartnerDailyStats.salon_id == salon.id).scalar() or 0
        total_offers_rejected += db.session.query(db.func.sum(PartnerDailyStats.offers_rejected)).filter(PartnerDailyStats.salon_id == salon.id).scalar() or 0    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–∞–ª–æ–Ω—ã
    if not partner.salons:
        flash('–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–ª–æ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–ª–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', 'danger')
        return redirect(url_for('partner.settings'))

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    def get_chart_data(chart_type, salon_id, period='month'):
        if chart_type == 'clients_brought':
            return get_data_from_partner_daily_stats(salon_id, 'clients_brought', period)
        elif chart_type == 'offers_shown':
            return get_data_from_partner_daily_stats(salon_id, 'offers_shown', period)
        elif chart_type == 'offers_accepted':
            return get_data_from_partner_daily_stats(salon_id, 'offers_accepted', period)
        elif chart_type == 'offers_rejected':
            return get_data_from_partner_daily_stats(salon_id, 'offers_rejected', period)
        elif chart_type == 'partners_invited':
            return get_partners_invited_data(partner.id, period)
        else:
            return {'labels': [], 'data': []}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    clients_brought_data = get_chart_data('clients_brought', selected_salon_id, period)
    offers_shown_data = get_chart_data('offers_shown', selected_salon_id, period)
    offers_accepted_data = get_chart_data('offers_accepted', selected_salon_id, period)
    offers_rejected_data = get_chart_data('offers_rejected', selected_salon_id, period)
    partners_invited_data = get_chart_data('partners_invited', selected_salon_id, period)

    def get_last_actions(partner_id):
        actions = []
        for salon in partner.salons:
            actions.extend(get_last_actions_for_salon(partner_id, salon.id))
        actions.extend(get_last_actions_for_partner(partner_id))
        actions.sort(key=lambda x: datetime.strptime(x.split(' - ')[-2], '%d-%m-%Y'), reverse=True) 
        return actions[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

    def get_last_actions_for_salon(partner_id, salon_id):
        actions = []
        clients = ClientsData.query.filter_by(initial_salon_id=salon_id).order_by(
            ClientsData.date.desc()).all()
        for client in clients:
            salon = PartnerInfo.query.get(client.initial_salon_id)
            salon_name = salon.name if salon else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–ª–æ–Ω'
            actions.append(
                f"–ü—Ä–∏–≤–µ–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç {client.client_name} ({client.chat_id}) - {client.date.strftime('%d-%m-%Y')} - {salon_name}")
        client_statuses = ClientSalonStatus.query.filter_by(salon_id=salon_id, status='claimed').order_by(
            ClientSalonStatus.date.desc()).all()
        for client_status in client_statuses:
            salon = PartnerInfo.query.get(client_status.salon_id)
            client = ClientsData.query.get(client_status.client_id)
            salon_name = salon.name if salon else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∞–ª–æ–Ω'
            actions.append(
                f"–ü–æ–ª—É—á–µ–Ω –∫–ª–∏–µ–Ω—Ç {client.client_name} ({client.chat_id}) - {client_status.date.strftime('%d-%m-%Y')} - {salon_name}")
        return actions

    def get_last_actions_for_partner(partner_id):
        actions = []
        invitations = PartnerInvitation.query.filter_by(inviting_partner_id=partner_id).order_by(
            PartnerInvitation.invitation_date.desc()).limit(5).all()
        for invitation in invitations:
            invited_partner = Partner.query.get(invitation.invited_partner_id)
            actions.append(
                f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä {invited_partner.salons[0].name if invited_partner.salons else '-'} ({invited_partner.salons[0].id if invited_partner.salons else '-'}) - {invitation.invitation_date.strftime('%d-%m-%Y')} - ")
        return actions

    last_actions = get_last_actions(partner.id) # <- –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∞–ª–æ–Ω–æ–≤
    tips_and_tricks = Tip.query.filter_by(is_active=True).all()
    news_and_updates = News.query.filter_by(is_active=True).all()

    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return jsonify({
            'clients_brought_data': clients_brought_data,
            'clients_received_data': offers_accepted_data,
            'offers_shown_data': offers_shown_data,
            'offers_accepted_data': offers_accepted_data,
            'offers_rejected_data': offers_rejected_data,
            'partners_invited_data': partners_invited_data
        })

    return render_template('partner/dashboard.html',
                           partner=partner,
                           selected_salon_id=selected_salon_id,
                           period=period,
                           clients_brought_data=clients_brought_data,
                           clients_received_data=offers_accepted_data,
                           offers_shown_data=offers_shown_data,
                           offers_accepted_data=offers_accepted_data,
                           offers_rejected_data=offers_rejected_data,
                           partners_invited_data=partners_invited_data,
                           last_actions=last_actions, # <- –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ —à–∞–±–ª–æ–Ω
                           tips_and_tricks=tips_and_tricks,
                           news_and_updates=news_and_updates,                      
                           total_clients_brought=total_clients_brought,
                           total_clients_received=total_clients_received,
                           total_offers_shown=total_offers_shown,
                           total_offers_rejected=total_offers_rejected,
                           total_partners_invited=total_partners_invited
                           )


@bp.route('/settings', methods=['GET', 'POST'])
@login_required
def settings():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∞–ª–æ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    selected_salon_id = request.args.get('salon_id', partner.salons[0].id if partner.salons else None)
    salon = PartnerInfo.query.get(selected_salon_id) if selected_salon_id else None

    if not salon and partner.salons:
        flash('–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–ª–æ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–ª–æ–Ω, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', 'danger')
        return redirect(url_for('partner.settings'))

    edit_form = EditSalonForm(obj=salon)
    if edit_form.validate_on_submit() and request.method == 'POST':
        edit_form.populate_obj(salon)
        salon.name = edit_form.salon_name.data
        salon.message_partner_name = edit_form.message_salon_name.data
        salon.city_id = edit_form.city.data.id
        salon.categories = edit_form.categories.data
        db.session.commit()
        flash('–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
        return redirect(url_for('partner.settings'))

    sample_messages = {}
    if salon:
        for template_name in ['spinning_wheel_message', 'discount_offer', 'claim_discount']:
            sample_messages[template_name] = asyncio.run(get_template_or_default(
                template_name,
                discount=salon.discount,
                salon_name=salon.name,
                contacts=salon.contacts,
                message_salon_name=salon.message_partner_name,
                categories=", ".join([category.name for category in salon.categories]),
                attempts_left=1
            ))
            
        spinning_wheel_message_template = escape_handlebars_braces(
            MessageTemplate.query.filter_by(name='spinning_wheel_message').first().template).replace('\n', '\\n')
        discount_offer_template = escape_handlebars_braces(
            MessageTemplate.query.filter_by(name='discount_offer').first().template).replace('\n', '\\n')
        claim_discount_template = escape_handlebars_braces(
            MessageTemplate.query.filter_by(name='claim_discount').first().template).replace('\n', '\\n')

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è WhatsApp
        qr_code_data_whatsapp = f"https://wa.me/79933062088?text=–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ({salon.id})"
        qr_code_image_whatsapp = generate_qr_code(qr_code_data_whatsapp)
        qr_code_image_base64_whatsapp = base64.b64encode(qr_code_image_whatsapp).decode('utf-8')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è Telegram
    qr_code_data_telegram = f"https://t.me/{os.environ.get('TELEGRAM_BOT_USERNAME')}?start={partner.unique_code}"
    qr_code_image_telegram = generate_qr_code(qr_code_data_telegram)
    qr_code_image_base64_telegram = base64.b64encode(qr_code_image_telegram).decode('utf-8')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥–∞–Ω–Ω—ã–µ AmoCRM, –≤ —Å–ª–æ–≤–∞—Ä–∏ Python
    amocrm_contacts_fields = json.loads(partner.amocrm_contacts_fields) if partner.amocrm_contacts_fields else {}
    amocrm_leads_fields = json.loads(partner.amocrm_leads_fields) if partner.amocrm_leads_fields else {}
    amocrm_pipelines = json.loads(partner.amocrm_pipelines) if partner.amocrm_pipelines else {}
    amocrm_field_mapping = json.loads(partner.amocrm_field_mapping) if partner.amocrm_field_mapping else {}
    amocrm_settings = json.loads(partner.amocrm_settings) if partner.amocrm_settings else {}

    return render_template('partner/settings.html',
                           partner=partner,
                           salon=salon,
                           edit_form=edit_form,
                           PartnerInfo=PartnerInfo,
                           sample_messages=sample_messages,
                           spinning_wheel_message_template=spinning_wheel_message_template,
                           discount_offer_template=discount_offer_template,
                           claim_discount_template=claim_discount_template,
                           qr_code_image_base64_whatsapp=qr_code_image_base64_whatsapp,
                           qr_code_image_base64_telegram=qr_code_image_base64_telegram,
                           telegram_chat_id=partner.telegram_chat_id,
                           selected_salon_id=selected_salon_id,
                           amocrm_contacts_fields=amocrm_contacts_fields,
                           amocrm_leads_fields=amocrm_leads_fields,
                           amocrm_pipelines=amocrm_pipelines,
                           amocrm_field_mapping=amocrm_field_mapping, 
                           amocrm_settings=amocrm_settings
                           )


@bp.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    form = EditUserForm(obj=current_user)
    if form.validate_on_submit():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        existing_user = User.query.filter_by(username=form.username.data).first()
        if existing_user and existing_user.id != current_user.id:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.', 'danger')
            return render_template('partner/profile.html', form=form)

        current_user.username = form.username.data
        db.session.commit()
        flash('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
        return redirect(url_for('partner.profile'))
    return render_template('partner/profile.html', form=form)


@bp.route('/referrals')
@login_required
def referrals():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))
    referral_stats = get_referral_stats(partner.id)
    total_clients_brought = get_total_clients_brought_by_referrals(partner.id)
    return render_template('partner/referrals.html',
                           partner=partner,
                           referral_stats=referral_stats,
                           total_clients_brought=total_clients_brought)


@bp.route('/qr_code_whatsapp/<salon_id>')
@login_required
def qr_code_whatsapp(salon_id):
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    salon = PartnerInfo.query.get_or_404(salon_id)
    if salon not in partner.salons:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–ª–æ–Ω—É.', 'danger')
        return redirect(url_for('partner.dashboard'))

    data = f"https://wa.me/79933062088?text=–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ({salon.id})"
    img = generate_qr_code(data)
    return send_file(
        io.BytesIO(img),
        mimetype='image/png',
        as_attachment=True,
        download_name=f'qr_code_whatsapp_{salon.id}.png'
    )


@bp.route('/detailed_stats/<stat_type>')
@login_required
def detailed_stats(stat_type):
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    if stat_type == 'brought':
        clients = ClientsData.query.filter(ClientsData.initial_salon_id.in_([salon.id for salon in partner.salons])).all()
    elif stat_type == 'received':
        clients = ClientsData.query.filter(ClientsData.claimed_salon_id.in_([salon.id for salon in partner.salons])).all()
    elif stat_type == 'invited':
        clients = partner.invited_partners.all()
    else:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', 'danger')
        return redirect(url_for('partner.dashboard'))

    return render_template('partner/detailed_stats.html',
                           stat_type=stat_type,
                           clients=clients,
                           PartnerInvitation=PartnerInvitation)


@bp.route('/faq')
@login_required
def faq():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))
    faqs = FAQ.query.all()
    return render_template('partner/faq.html', faqs=faqs, partner=partner)


@bp.route('/faq/confirm', methods=['POST'])
@login_required
def confirm_faq():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))
    if not partner.faq_status:
        partner.faq_status = PartnerFAQStatus(has_read_faq=True)
    else:
        partner.faq_status.has_read_faq = True
    db.session.commit()
    flash('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å FAQ.', 'success')
    return redirect(url_for('partner.dashboard'))


@bp.route('/reset_password', methods=['GET', 'POST'])
async def reset_password():  # async –ø–µ—Ä–µ–¥ def
    if current_user.is_authenticated:
        return redirect(url_for('partner.dashboard'))
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['login']).first()
        if user:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            token = user.get_reset_password_token()
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤ WhatsApp
            reset_link = url_for('partner.reset_password_with_token', token=token, _external=True)
            message = f'–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {reset_link}'
            await send_message(user.username, message)  # await –ø–µ—Ä–µ–¥ send_message
            flash('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ WhatsApp.', 'info')
            return redirect(url_for('partner.login'))
        else:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.', 'danger')
    return render_template('partner/reset_password.html')


@bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password_with_token(token):
    if current_user.is_authenticated:
        return redirect(url_for('partner.dashboard'))
    user = User.verify_reset_password_token(token)
    if not user:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω.', 'danger')
        return redirect(url_for('partner.reset_password'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash('–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success')
        return redirect(url_for('partner.login'))
    return render_template('partner/reset_password_with_token.html', form=form)


def log_partner_action(partner_id, action_type, details=None):
    action = PartnerAction(partner_id=partner_id, action_type=action_type, details=details)
    db.session.add(action)
    db.session.commit()


@bp.route('/invite_partner', methods=['POST'])
@login_required
def invite_partner():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    phone_number = request.form.get('phone_number')
    salon_name = request.form.get('salon_name')

    if not phone_number or not salon_name:
        flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞.', 'danger')
        return redirect(url_for('partner.referrals'))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp
    message = f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–∏—Å—É ¬´–°–∞—Ä–∞—Ñ–∞–Ω¬ª! {partner.salons[0].name if partner.salons else ''} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {partner.referral_link}"
    asyncio.run(send_message(phone_number, message))

    flash('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success')
    return redirect(url_for('partner.referrals'))

@bp.route('/salons/<salon_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_salon(salon_id):
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    salon = PartnerInfo.query.get_or_404(salon_id)

    if salon not in partner.salons:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–ª–æ–Ω—É.', 'danger')
        return redirect(url_for('partner.dashboard'))

    form = EditSalonForm(obj=salon)
    if form.validate_on_submit():
        salon.name = form.salon_name.data
        salon.partner_type = form.partner_type.data
        salon.categories = form.categories.data
        salon.city_id = form.city.data.id
        salon.discount = form.discount.data
        salon.contacts = form.contacts.data
        salon.message_partner_name = form.message_salon_name.data
        db.session.commit()
        flash('–î–∞–Ω–Ω—ã–µ —Å–∞–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
        return redirect(url_for('partner.settings', salon_id=salon.id))

    return render_template('partner/edit_salon.html', form=form, salon=salon)

@bp.route('/salons/<salon_id>/delete', methods=['POST'])
@login_required
def delete_salon(salon_id):
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    salon = PartnerInfo.query.get_or_404(salon_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–∞–ª–æ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É
    if salon not in partner.salons:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Å–∞–ª–æ–Ω—É.', 'danger')
        return redirect(url_for('partner.dashboard'))

    try:
        partner.salons.remove(salon)
        # –ï—Å–ª–∏ —É —Å–∞–ª–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if not salon.partners:
            db.session.delete(salon)
        db.session.commit()
        flash('–°–∞–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–ª–æ–Ω–∞: {e}', 'danger')

    return redirect(url_for('partner.settings'))

@bp.route('/salon_stats/<salon_id>')
@login_required
def salon_stats(salon_id):
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        return jsonify({'error': 'Partner not found'}), 404

    salon = PartnerInfo.query.get_or_404(salon_id)
    if salon not in partner.salons:
        return jsonify({'error': 'Access denied'}), 403

    period = request.args.get('period', 'month')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ PartnerDailyStats
    clients_brought_data = get_data_from_partner_daily_stats(salon_id, 'clients_brought', period)
    offers_shown_data = get_data_from_partner_daily_stats(salon_id, 'offers_shown', period)
    offers_accepted_data = get_data_from_partner_daily_stats(salon_id, 'offers_accepted', period)
    offers_rejected_data = get_data_from_partner_daily_stats(salon_id, 'offers_rejected', period)
    partners_invited_data = get_partners_invited_data(partner.id, period)

    return jsonify({
        'clients_brought_data': clients_brought_data,
        'offers_shown_data': offers_shown_data,
        'offers_accepted_data': offers_accepted_data,
        'offers_rejected_data': offers_rejected_data,
        'partners_invited_data': partners_invited_data
    })

@bp.route('/salons/create', methods=['GET', 'POST'])
@login_required
def create_salon():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    form = AddSalonForm()
    if form.validate_on_submit():
        try:
            partner_id = generate_unique_salon_id(form.city.data.name)
            new_salon = PartnerInfo(
                id=partner_id,
                partner_type=form.partner_type.data,
                categories=form.categories.data,
                name=form.salon_name.data,
                discount=form.discount_text.data,
                city_id=form.city.data.id,
                contacts=form.contacts.data,
                message_partner_name=form.message_salon_name.data
            )
            db.session.add(new_salon)
            partner.salons.append(new_salon)
            db.session.commit()
            flash('–°–∞–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            return redirect(url_for('partner.settings'))
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–ª–æ–Ω–∞: {e}', 'danger')

    return render_template('partner/create_salon.html', form=form)

@bp.route('/disable_telegram_notifications', methods=['POST'])
@login_required
def disable_telegram_notifications():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    partner.telegram_chat_id = None
    db.session.commit()
    flash('Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.', 'success')
    return redirect(url_for('partner.settings'))
    
@bp.route('/amocrm/connect', methods=['POST'])
@login_required
def connect_amocrm():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    subdomain = request.form.get('subdomain')
    api_key = request.form.get('api_key')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    try:
        url = f'https://{subdomain}.amocrm.ru/api/v4/account'
        headers = {'Authorization': f'Bearer {api_key}'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ AmoCRM: {e}', 'danger')
        return redirect(url_for('partner.settings'))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—è—Ö, –≤–æ—Ä–æ–Ω–∫–∞—Ö –∏ —ç—Ç–∞–ø–∞—Ö
    try:
        account_info = get_amocrm_account_info(subdomain, api_key)
        contacts_fields = get_amocrm_fields(subdomain, api_key, 'contacts')
        leads_fields = get_amocrm_fields(subdomain, api_key, 'leads')
        pipelines = get_amocrm_pipelines(subdomain, api_key)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø—ã –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö
        for pipeline in pipelines['_embedded']['pipelines']:
            pipeline['stages'] = get_amocrm_pipeline_stages(subdomain, api_key, pipeline['id'])

        partner.amocrm_subdomain = subdomain
        partner.amocrm_api_key = api_key
        partner.amocrm_account_info = json.dumps(account_info)
        partner.amocrm_contacts_fields = json.dumps(contacts_fields)
        partner.amocrm_leads_fields = json.dumps(leads_fields)
        partner.amocrm_pipelines = json.dumps(pipelines)
        db.session.commit()

    except requests.exceptions.RequestException as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ AmoCRM: {e}', 'danger')
        return redirect(url_for('partner.settings'))

    flash('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AmoCRM —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', 'success')
    return redirect(url_for('partner.settings', tab='integrationsSettings'))


@bp.route('/amocrm/disconnect', methods=['POST'])
@login_required
def disconnect_amocrm():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    partner.amocrm_subdomain = None
    partner.amocrm_api_key = None
    partner.amocrm_account_info = None
    partner.amocrm_contacts_fields = None
    partner.amocrm_leads_fields = None
    partner.amocrm_pipelines = None
    partner.amocrm_field_mapping = None
    partner.amocrm_settings = None
    db.session.commit()

    flash('AmoCRM –æ—Ç–∫–ª—é—á–µ–Ω.', 'success')
    return redirect(url_for('partner.settings'))


@bp.route('/amocrm/save_field_mapping', methods=['POST'])
@login_required
def save_amocrm_field_mapping():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        flash('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.', 'danger')
        return redirect(url_for('partner.register'))

    amocrm_field_mapping = {}
    for key, value in request.form.items():
        if (key.startswith('amocrm_contact_field_') or key.startswith('amocrm_lead_field_')) and value:
            key = key.replace('amocrm_contact_field_', '').replace('amocrm_lead_field_', '')
            amocrm_field_mapping[key] = str(value)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    amocrm_settings = json.loads(partner.amocrm_settings) if partner.amocrm_settings else {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    amocrm_settings['pipeline_id'] = request.form.get('amocrm_pipeline')
    amocrm_settings['stage_id'] = request.form.get('amocrm_stage')

    partner.amocrm_field_mapping = json.dumps(amocrm_field_mapping)
    partner.amocrm_settings = json.dumps(amocrm_settings)
    db.session.commit()

    flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success')
    return redirect(url_for('partner.settings', tab='integrationsSettings'))


def get_amocrm_account_info(subdomain, api_key):
    url = f'https://{subdomain}.amocrm.ru/api/v4/account'
    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()


def get_amocrm_fields(subdomain, api_key, entity_type):
    url = f'https://{subdomain}.amocrm.ru/api/v4/{entity_type}/custom_fields'
    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()

    fields_data = response.json()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—è—Ö
    fields_info = {}
    for field in fields_data['_embedded']['custom_fields']:
        fields_info[str(field['id'])] = {
            'name': field['name']  # –£–¥–∞–ª–µ–Ω 'field_name_format'
        }
    return fields_info


def get_amocrm_pipelines(subdomain, api_key):
    url = f'https://{subdomain}.amocrm.ru/api/v4/leads/pipelines'
    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()    
    
def get_amocrm_pipeline_stages(subdomain, api_key, pipeline_id):
    url = f'https://{subdomain}.amocrm.ru/api/v4/leads/pipelines/{pipeline_id}/statuses'
    headers = {'Authorization': f'Bearer {api_key}'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()    
    
@bp.route('/amocrm/test_integration', methods=['POST'])
@login_required
async def test_amocrm_integration():
    partner = Partner.query.filter_by(user_id=current_user.id).first()
    if not partner:
        return jsonify({'success': False, 'message': '–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.'})

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    test_client_name = request.form.get('testClientName')
    test_client_phone = request.form.get('testClientPhone')
    test_client_city = request.form.get('testClientCity')

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    test_client_data = ClientsData(
        chat_id=test_client_phone or '79991234567',
        client_name=test_client_name or '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        city=test_client_city or '–ú–æ—Å–∫–≤–∞',
        initial_salon_name=partner.salons[0].name if partner.salons else '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–ª–æ–Ω',
        initial_salon_id=partner.salons[0].id if partner.salons else 'test_salon_id',
        claimed_salon_name=partner.salons[0].name if partner.salons else '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–ª–æ–Ω',
        claimed_salon_id=partner.salons[0].id if partner.salons else 'test_salon_id'
    )

    try:
        contact_id = await create_partner_amocrm_contact(test_client_data, partner)
        if contact_id:
            await create_or_update_partner_amocrm_lead(test_client_data, contact_id, partner, partner.salons[0])
            return jsonify({'success': True, 'message': '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω—ã –≤ AmoCRM.'})
        else:
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}'})